package com.leralee.rxjava;

import com.leralee.rxjava.core.Disposable;
import com.leralee.rxjava.core.Observable;
import com.leralee.rxjava.core.Observer;
import com.leralee.rxjava.schedulers.IOThreadScheduler;
import com.leralee.rxjava.schedulers.SingleThreadScheduler;

/**
 * @author valeriali
 * @project CustomRXJava
 */
public class Main {
    public static void main(String[] args) throws InterruptedException {
        System.out.println("üì¶ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ CustomRxJava...\n");

        Disposable disposable = Observable
                .<Integer>create(emitter -> {
                    System.out.println("[SOURCE] –ü–æ—Ç–æ–∫: " + Thread.currentThread().getName());
                    for (int i = 1; i <= 5; i++) {
                        Thread.sleep(300); // –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                        emitter.onNext(i);
                    }
                    emitter.onComplete();
                })
                .subscribeOn(new IOThreadScheduler()) // –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                .observeOn(new SingleThreadScheduler()) // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Single –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                .map(i -> {
                    System.out.println("[MAP] –ü–æ—Ç–æ–∫: " + Thread.currentThread().getName());
                    return i * 10;
                })
                .filter(i -> i % 20 == 0)
                .flatMap(i -> Observable.create(em -> {
                    em.onNext(i + " - A");
                    em.onNext(i + " - B");
                    em.onComplete();
                }))
                .subscribe(new Observer<>() {
                    @Override
                    public void onNext(Object item) {
                        System.out.println("[Observer] –ü–æ–ª—É—á–µ–Ω–æ: " + item + " | –ü–æ—Ç–æ–∫: " + Thread.currentThread().getName());
                    }

                    @Override
                    public void onError(Throwable t) {
                        System.err.println("[Observer] –û—à–∏–±–∫–∞: " + t.getMessage());
                    }

                    @Override
                    public void onComplete() {
                        System.out.println("[Observer] –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω");
                    }
                });

        // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, –ø–æ—Ç–æ–º –æ—Ç–º–µ–Ω–∏–º –ø–æ–¥–ø–∏—Å–∫—É
        Thread.sleep(1200);
        System.out.println("\n –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø–æ—Ç–æ–∫–∞...\n");
        disposable.dispose();

        // –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        Thread.sleep(2000);
        System.out.println("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }
}
